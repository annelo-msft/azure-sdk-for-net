// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Template
{
    /// <summary> The ConfidentialLedger service client. </summary>
    public partial class ConfidentialLedgerClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://vault.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ConfidentialLedgerClient for mocking. </summary>
        protected ConfidentialLedgerClient()
        {
        }

        /// <summary> Initializes a new instance of ConfidentialLedgerClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public ConfidentialLedgerClient(TokenCredential credential) : this(credential, new ConfidentialLedgerClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ConfidentialLedgerClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public ConfidentialLedgerClient(TokenCredential credential, ConfidentialLedgerClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new ConfidentialLedgerClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Retrieves a list of collection ids present in the Confidential Ledger. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetCollectionsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetCollectionsAsync("<ledgerUri>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("items")[0].GetProperty("collectionId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Collection ids are user-created collections of ledger entries
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CollectionArray</c>:
        /// <code>{
        ///   items: [
        ///     {
        ///       collectionId: string, # Required.
        ///     }
        ///   ], # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetCollectionsAsync(string ledgerUri, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetCollections");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCollectionsRequest(ledgerUri, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieves a list of collection ids present in the Confidential Ledger. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetCollections with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetCollections("<ledgerUri>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("items")[0].GetProperty("collectionId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Collection ids are user-created collections of ledger entries
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CollectionArray</c>:
        /// <code>{
        ///   items: [
        ///     {
        ///       collectionId: string, # Required.
        ///     }
        ///   ], # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetCollections(string ledgerUri, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetCollections");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCollectionsRequest(ledgerUri, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets quotes for all nodes of the Confidential Ledger. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetEnclaveQuotesAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetEnclaveQuotesAsync("<ledgerUri>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave. </remarks>
        public virtual async Task<Response> GetEnclaveQuotesAsync(string ledgerUri, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetEnclaveQuotes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEnclaveQuotesRequest(ledgerUri, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets quotes for all nodes of the Confidential Ledger. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetEnclaveQuotes with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetEnclaveQuotes("<ledgerUri>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave. </remarks>
        public virtual Response GetEnclaveQuotes(string ledgerUri, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetEnclaveQuotes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEnclaveQuotesRequest(ledgerUri, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the constitution used for governance. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetConstitutionAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetConstitutionAsync("<ledgerUri>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> The constitution is a script that assesses and applies proposals from consortium members. </remarks>
        public virtual async Task<Response> GetConstitutionAsync(string ledgerUri, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetConstitution");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConstitutionRequest(ledgerUri, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the constitution used for governance. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetConstitution with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetConstitution("<ledgerUri>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> The constitution is a script that assesses and applies proposals from consortium members. </remarks>
        public virtual Response GetConstitution(string ledgerUri, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetConstitution");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConstitutionRequest(ledgerUri, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the consortium members. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetConsortiumMembersAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetConsortiumMembersAsync("<ledgerUri>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> Consortium members can manage the Confidential Ledger. </remarks>
        public virtual async Task<Response> GetConsortiumMembersAsync(string ledgerUri, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetConsortiumMembers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConsortiumMembersRequest(ledgerUri, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the consortium members. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetConsortiumMembers with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetConsortiumMembers("<ledgerUri>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> Consortium members can manage the Confidential Ledger. </remarks>
        public virtual Response GetConsortiumMembers(string ledgerUri, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetConsortiumMembers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConsortiumMembersRequest(ledgerUri, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Writes a ledger entry. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="collectionId"> The collection id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PostLedgerEntryAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// var data = new {
        ///     contents = "<contents>",
        ///     collectionId = "<collectionId>",
        ///     transactionId = "<transactionId>",
        /// };
        /// 
        /// Response response = await client.PostLedgerEntryAsync("<ledgerUri>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PostLedgerEntryAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// var data = new {
        ///     contents = "<contents>",
        ///     collectionId = "<collectionId>",
        ///     transactionId = "<transactionId>",
        /// };
        /// 
        /// Response response = await client.PostLedgerEntryAsync("<ledgerUri>", RequestContent.Create(data), "<collectionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// A collection id may optionally be specified.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>LedgerEntry</c>:
        /// <code>{
        ///   contents: string, # Required.
        ///   collectionId: string, # Required.
        ///   transactionId: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostLedgerEntryAsync(string ledgerUri, RequestContent content, string collectionId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.PostLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostLedgerEntryRequest(ledgerUri, content, collectionId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Writes a ledger entry. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="collectionId"> The collection id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PostLedgerEntry with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// var data = new {
        ///     contents = "<contents>",
        ///     collectionId = "<collectionId>",
        ///     transactionId = "<transactionId>",
        /// };
        /// 
        /// Response response = client.PostLedgerEntry("<ledgerUri>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PostLedgerEntry with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// var data = new {
        ///     contents = "<contents>",
        ///     collectionId = "<collectionId>",
        ///     transactionId = "<transactionId>",
        /// };
        /// 
        /// Response response = client.PostLedgerEntry("<ledgerUri>", RequestContent.Create(data), "<collectionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// A collection id may optionally be specified.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>LedgerEntry</c>:
        /// <code>{
        ///   contents: string, # Required.
        ///   collectionId: string, # Required.
        ///   transactionId: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostLedgerEntry(string ledgerUri, RequestContent content, string collectionId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.PostLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostLedgerEntryRequest(ledgerUri, content, collectionId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the ledger entry at the specified transaction id. A collection id may optionally be specified to indicate the collection from which to fetch the value. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="transactionId"> Identifies a write transaction. </param>
        /// <param name="collectionId"> The collection id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetLedgerEntryAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetLedgerEntryAsync("<ledgerUri>", "<transactionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call GetLedgerEntryAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetLedgerEntryAsync("<ledgerUri>", "<transactionId>", "<collectionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetLedgerEntryAsync(string ledgerUri, string transactionId, string collectionId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNullOrEmpty(transactionId, nameof(transactionId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLedgerEntryRequest(ledgerUri, transactionId, collectionId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the ledger entry at the specified transaction id. A collection id may optionally be specified to indicate the collection from which to fetch the value. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="transactionId"> Identifies a write transaction. </param>
        /// <param name="collectionId"> The collection id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetLedgerEntry with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetLedgerEntry("<ledgerUri>", "<transactionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call GetLedgerEntry with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetLedgerEntry("<ledgerUri>", "<transactionId>", "<collectionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response GetLedgerEntry(string ledgerUri, string transactionId, string collectionId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNullOrEmpty(transactionId, nameof(transactionId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLedgerEntryRequest(ledgerUri, transactionId, collectionId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a receipt certifying ledger contents at a particular transaction id. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="transactionId"> Identifies a write transaction. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetReceiptAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetReceiptAsync("<ledgerUri>", "<transactionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetReceiptAsync(string ledgerUri, string transactionId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNullOrEmpty(transactionId, nameof(transactionId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetReceipt");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReceiptRequest(ledgerUri, transactionId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a receipt certifying ledger contents at a particular transaction id. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="transactionId"> Identifies a write transaction. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetReceipt with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetReceipt("<ledgerUri>", "<transactionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response GetReceipt(string ledgerUri, string transactionId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNullOrEmpty(transactionId, nameof(transactionId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetReceipt");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReceiptRequest(ledgerUri, transactionId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of an entry identified by a transaction id. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="transactionId"> Identifies a write transaction. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetTransactionStatusAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetTransactionStatusAsync("<ledgerUri>", "<transactionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetTransactionStatusAsync(string ledgerUri, string transactionId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNullOrEmpty(transactionId, nameof(transactionId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetTransactionStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTransactionStatusRequest(ledgerUri, transactionId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of an entry identified by a transaction id. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="transactionId"> Identifies a write transaction. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> or <paramref name="transactionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetTransactionStatus with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetTransactionStatus("<ledgerUri>", "<transactionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response GetTransactionStatus(string ledgerUri, string transactionId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNullOrEmpty(transactionId, nameof(transactionId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetTransactionStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTransactionStatusRequest(ledgerUri, transactionId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the current value available in the ledger. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="collectionId"> The collection id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetCurrentLedgerEntryAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetCurrentLedgerEntryAsync("<ledgerUri>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call GetCurrentLedgerEntryAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetCurrentLedgerEntryAsync("<ledgerUri>", "<collectionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetCurrentLedgerEntryAsync(string ledgerUri, string collectionId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetCurrentLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCurrentLedgerEntryRequest(ledgerUri, collectionId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the current value available in the ledger. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="collectionId"> The collection id. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetCurrentLedgerEntry with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetCurrentLedgerEntry("<ledgerUri>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call GetCurrentLedgerEntry with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetCurrentLedgerEntry("<ledgerUri>", "<collectionId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response GetCurrentLedgerEntry(string ledgerUri, string collectionId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetCurrentLedgerEntry");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCurrentLedgerEntryRequest(ledgerUri, collectionId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a user from the Confidential Ledger. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteUserAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.DeleteUserAsync("<ledgerUri>", "<userId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteUserAsync(string ledgerUri, string userId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.DeleteUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteUserRequest(ledgerUri, userId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a user from the Confidential Ledger. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteUser with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.DeleteUser("<ledgerUri>", "<userId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteUser(string ledgerUri, string userId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.DeleteUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteUserRequest(ledgerUri, userId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a user. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetUserAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = await client.GetUserAsync("<ledgerUri>", "<userId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetUserAsync(string ledgerUri, string userId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUserRequest(ledgerUri, userId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a user. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/> or <paramref name="userId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetUser with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// Response response = client.GetUser("<ledgerUri>", "<userId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response GetUser(string ledgerUri, string userId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNull(userId, nameof(userId));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.GetUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUserRequest(ledgerUri, userId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a user or updates a user&apos;s fields. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/>, <paramref name="userId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateUserAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// var data = new {
        ///     assignedRole = "Administrator",
        ///     userId = "<userId>",
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateUserAsync("<ledgerUri>", "<userId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required. Represents an assignable role
        ///   userId: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateUserAsync(string ledgerUri, string userId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNull(userId, nameof(userId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.CreateOrUpdateUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateUserRequest(ledgerUri, userId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a user or updates a user&apos;s fields. </summary>
        /// <param name="ledgerUri"> ledgerUri - server parameter. </param>
        /// <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ledgerUri"/>, <paramref name="userId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="ledgerUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateUser with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ConfidentialLedgerClient(credential);
        /// 
        /// var data = new {
        ///     assignedRole = "Administrator",
        ///     userId = "<userId>",
        /// };
        /// 
        /// Response response = client.CreateOrUpdateUser("<ledgerUri>", "<userId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>LedgerUser</c>:
        /// <code>{
        ///   assignedRole: &quot;Administrator&quot; | &quot;Contributor&quot; | &quot;Reader&quot;, # Required. Represents an assignable role
        ///   userId: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateUser(string ledgerUri, string userId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(ledgerUri, nameof(ledgerUri));
            Argument.AssertNotNull(userId, nameof(userId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ConfidentialLedgerClient.CreateOrUpdateUser");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateUserRequest(ledgerUri, userId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetCollectionsRequest(string ledgerUri, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/collections", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetEnclaveQuotesRequest(string ledgerUri, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/enclaveQuotes", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetConstitutionRequest(string ledgerUri, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/governance/constitution", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetConsortiumMembersRequest(string ledgerUri, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/governance/members", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePostLedgerEntryRequest(string ledgerUri, RequestContent content, string collectionId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/transactions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (collectionId != null)
            {
                uri.AppendQuery("collectionId", collectionId, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetLedgerEntryRequest(string ledgerUri, string transactionId, string collectionId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/transactions/", false);
            uri.AppendPath(transactionId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (collectionId != null)
            {
                uri.AppendQuery("collectionId", collectionId, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetReceiptRequest(string ledgerUri, string transactionId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/transactions/", false);
            uri.AppendPath(transactionId, true);
            uri.AppendPath("/receipt", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTransactionStatusRequest(string ledgerUri, string transactionId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/transactions/", false);
            uri.AppendPath(transactionId, true);
            uri.AppendPath("/status", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetCurrentLedgerEntryRequest(string ledgerUri, string collectionId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/transactions/current", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (collectionId != null)
            {
                uri.AppendQuery("collectionId", collectionId, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteUserRequest(string ledgerUri, string userId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/users/", false);
            uri.AppendPath(userId, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetUserRequest(string ledgerUri, string userId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/users/", false);
            uri.AppendPath(userId, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateUserRequest(string ledgerUri, string userId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(ledgerUri, true);
            uri.AppendPath("/app/users/", false);
            uri.AppendPath(userId, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
