// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Template
{
    /// <summary> The Template service client. </summary>
    public partial class TemplateClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://vault.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _vaultBaseUrl;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TemplateClient for mocking. </summary>
        protected TemplateClient()
        {
        }

        /// <summary> Initializes a new instance of TemplateClient. </summary>
        /// <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vaultBaseUrl"/> or <paramref name="credential"/> is null. </exception>
        public TemplateClient(string vaultBaseUrl, TokenCredential credential) : this(vaultBaseUrl, credential, new TemplateClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TemplateClient. </summary>
        /// <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vaultBaseUrl"/> or <paramref name="credential"/> is null. </exception>
        public TemplateClient(string vaultBaseUrl, TokenCredential credential, TemplateClientOptions options)
        {
            Argument.AssertNotNull(vaultBaseUrl, nameof(vaultBaseUrl));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new TemplateClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _vaultBaseUrl = vaultBaseUrl;
            _apiVersion = options.Version;
        }

        /// <summary> The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="optionalHeaderParamString"> An optional parameter. </param>
        /// <param name="optionalHeaderParamInt"> An optional parameter. </param>
        /// <param name="optionalHeaderParamBool"> An optional parameter. </param>
        /// <param name="optionalHeaderParamNumber"> An optional parameter. </param>
        /// <param name="optionalQueryParamString"> An optional parameter. </param>
        /// <param name="optionalQueryParamInt"> An optional parameter. </param>
        /// <param name="optionalQueryParamBool"> An optional parameter. </param>
        /// <param name="optionalQueryParamNumber"> An optional parameter. </param>
        /// <param name="optionalHeaderParamStringDefault"> An optional parameter. </param>
        /// <param name="optionalHeaderParamIntDefault"> An optional parameter. </param>
        /// <param name="optionalQueryParamStringDefault"> An optional parameter. </param>
        /// <param name="optionalQueryParamIntDefault"> An optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: string,
        ///   id: string,
        ///   contentType: string,
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   kid: string,
        ///   managed: boolean
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetSecretAsync(string secretName, string optionalHeaderParamString = null, int? optionalHeaderParamInt = null, bool? optionalHeaderParamBool = null, float? optionalHeaderParamNumber = null, string optionalQueryParamString = null, int? optionalQueryParamInt = null, bool? optionalQueryParamBool = null, float? optionalQueryParamNumber = null, string optionalHeaderParamStringDefault = null, int? optionalHeaderParamIntDefault = null, string optionalQueryParamStringDefault = null, int? optionalQueryParamIntDefault = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("TemplateClient.GetSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSecretRequest(secretName, optionalHeaderParamString, optionalHeaderParamInt, optionalHeaderParamBool, optionalHeaderParamNumber, optionalQueryParamString, optionalQueryParamInt, optionalQueryParamBool, optionalQueryParamNumber, optionalHeaderParamStringDefault, optionalHeaderParamIntDefault, optionalQueryParamStringDefault, optionalQueryParamIntDefault, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the secrets/get permission. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="optionalHeaderParamString"> An optional parameter. </param>
        /// <param name="optionalHeaderParamInt"> An optional parameter. </param>
        /// <param name="optionalHeaderParamBool"> An optional parameter. </param>
        /// <param name="optionalHeaderParamNumber"> An optional parameter. </param>
        /// <param name="optionalQueryParamString"> An optional parameter. </param>
        /// <param name="optionalQueryParamInt"> An optional parameter. </param>
        /// <param name="optionalQueryParamBool"> An optional parameter. </param>
        /// <param name="optionalQueryParamNumber"> An optional parameter. </param>
        /// <param name="optionalHeaderParamStringDefault"> An optional parameter. </param>
        /// <param name="optionalHeaderParamIntDefault"> An optional parameter. </param>
        /// <param name="optionalQueryParamStringDefault"> An optional parameter. </param>
        /// <param name="optionalQueryParamIntDefault"> An optional parameter. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: string,
        ///   id: string,
        ///   contentType: string,
        ///   tags: Dictionary&lt;string, string&gt;,
        ///   kid: string,
        ///   managed: boolean
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetSecret(string secretName, string optionalHeaderParamString = null, int? optionalHeaderParamInt = null, bool? optionalHeaderParamBool = null, float? optionalHeaderParamNumber = null, string optionalQueryParamString = null, int? optionalQueryParamInt = null, bool? optionalQueryParamBool = null, float? optionalQueryParamNumber = null, string optionalHeaderParamStringDefault = null, int? optionalHeaderParamIntDefault = null, string optionalQueryParamStringDefault = null, int? optionalQueryParamIntDefault = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("TemplateClient.GetSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSecretRequest(secretName, optionalHeaderParamString, optionalHeaderParamInt, optionalHeaderParamBool, optionalHeaderParamNumber, optionalQueryParamString, optionalQueryParamInt, optionalQueryParamBool, optionalQueryParamNumber, optionalHeaderParamStringDefault, optionalHeaderParamIntDefault, optionalQueryParamStringDefault, optionalQueryParamIntDefault, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetSecretRequest(string secretName, string optionalHeaderParamString, int? optionalHeaderParamInt, bool? optionalHeaderParamBool, float? optionalHeaderParamNumber, string optionalQueryParamString, int? optionalQueryParamInt, bool? optionalQueryParamBool, float? optionalQueryParamNumber, string optionalHeaderParamStringDefault, int? optionalHeaderParamIntDefault, string optionalQueryParamStringDefault, int? optionalQueryParamIntDefault, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_vaultBaseUrl, false);
            uri.AppendPath("/secrets/", false);
            uri.AppendPath(secretName, true);
            if (optionalQueryParamString != null)
            {
                uri.AppendQuery("optional-query-param-string", optionalQueryParamString, true);
            }
            if (optionalQueryParamInt != null)
            {
                uri.AppendQuery("optional-query-param-int", optionalQueryParamInt.Value, true);
            }
            if (optionalQueryParamBool != null)
            {
                uri.AppendQuery("optional-query-param-bool", optionalQueryParamBool.Value, true);
            }
            if (optionalQueryParamNumber != null)
            {
                uri.AppendQuery("optional-query-param-number", optionalQueryParamNumber.Value, true);
            }
            if (optionalQueryParamStringDefault != null)
            {
                uri.AppendQuery("optional-query-param-string-default", optionalQueryParamStringDefault, true);
            }
            if (optionalQueryParamIntDefault != null)
            {
                uri.AppendQuery("optional-query-param-int-default", optionalQueryParamIntDefault.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (optionalHeaderParamString != null)
            {
                request.Headers.Add("optional-header-param-string", optionalHeaderParamString);
            }
            if (optionalHeaderParamInt != null)
            {
                request.Headers.Add("optional-header-param-int", optionalHeaderParamInt.Value);
            }
            if (optionalHeaderParamBool != null)
            {
                request.Headers.Add("optional-header-param-bool", optionalHeaderParamBool.Value);
            }
            if (optionalHeaderParamNumber != null)
            {
                request.Headers.Add("optional-header-param-number", optionalHeaderParamNumber.Value);
            }
            if (optionalHeaderParamStringDefault != null)
            {
                request.Headers.Add("optional-header-param-string-default", optionalHeaderParamStringDefault);
            }
            if (optionalHeaderParamIntDefault != null)
            {
                request.Headers.Add("optional-header-param-int-default", optionalHeaderParamIntDefault.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
