// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.IoT.DeviceUpdate.Models;

namespace Azure.IoT.DeviceUpdate
{
    /// <summary> The DeviceUpdate service client. </summary>
    public partial class DeviceUpdateClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DeviceUpdateRestClient RestClient { get; }

        /// <summary> Initializes a new instance of DeviceUpdateClient for mocking. </summary>
        protected DeviceUpdateClient()
        {
        }

        /// <summary> Initializes a new instance of DeviceUpdateClient. </summary>
        /// <param name="endpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public DeviceUpdateClient(string endpoint, string instanceId, TokenCredential credential, DeviceUpdateClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException(nameof(instanceId));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new DeviceUpdateClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://api.adu.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new DeviceUpdateRestClient(_clientDiagnostics, _pipeline, endpoint, instanceId, options.Version);
        }

        /// <summary> Initializes a new instance of DeviceUpdateClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/>, <paramref name="instanceId"/> or <paramref name="apiVersion"/> is null. </exception>
        internal DeviceUpdateClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string instanceId, string apiVersion = "2021-06-01-preview")
        {
            RestClient = new DeviceUpdateRestClient(clientDiagnostics, pipeline, endpoint, instanceId, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Get a specific update version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="accessCondition"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Update>> GetUpdateAsync(string provider, string name, string version, AccessCondition accessCondition = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.GetUpdate");
            scope.Start();
            try
            {
                return await RestClient.GetUpdateAsync(provider, name, version, accessCondition, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific update version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="accessCondition"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Update> GetUpdate(string provider, string name, string version, AccessCondition accessCondition = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.GetUpdate");
            scope.Start();
            try
            {
                return RestClient.GetUpdate(provider, name, version, accessCondition, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific update file from the version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="fileId"> File identifier. </param>
        /// <param name="accessCondition"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UpdateFile>> GetFileAsync(string provider, string name, string version, string fileId, AccessCondition accessCondition = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.GetFile");
            scope.Start();
            try
            {
                return await RestClient.GetFileAsync(provider, name, version, fileId, accessCondition, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific update file from the version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="fileId"> File identifier. </param>
        /// <param name="accessCondition"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UpdateFile> GetFile(string provider, string name, string version, string fileId, AccessCondition accessCondition = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.GetFile");
            scope.Start();
            try
            {
                return RestClient.GetFile(provider, name, version, fileId, accessCondition, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve operation status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="accessCondition"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UpdateOperation>> GetOperationAsync(string operationId, AccessCondition accessCondition = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.GetOperation");
            scope.Start();
            try
            {
                return await RestClient.GetOperationAsync(operationId, accessCondition, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve operation status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="accessCondition"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UpdateOperation> GetOperation(string operationId, AccessCondition accessCondition = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.GetOperation");
            scope.Start();
            try
            {
                return RestClient.GetOperation(operationId, accessCondition, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of all updates that have been imported to Device Update for IoT Hub. </summary>
        /// <param name="search"> Request updates matching a free-text search expression. </param>
        /// <param name="filter"> Filter updates by its properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Update> ListUpdatesAsync(string search = null, string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Update>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListUpdates");
                scope.Start();
                try
                {
                    var response = await RestClient.ListUpdatesAsync(search, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Update>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListUpdates");
                scope.Start();
                try
                {
                    var response = await RestClient.ListUpdatesNextPageAsync(nextLink, search, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all updates that have been imported to Device Update for IoT Hub. </summary>
        /// <param name="search"> Request updates matching a free-text search expression. </param>
        /// <param name="filter"> Filter updates by its properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Update> ListUpdates(string search = null, string filter = null, CancellationToken cancellationToken = default)
        {
            Page<Update> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListUpdates");
                scope.Start();
                try
                {
                    var response = RestClient.ListUpdates(search, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Update> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListUpdates");
                scope.Start();
                try
                {
                    var response = RestClient.ListUpdatesNextPage(nextLink, search, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all update providers that have been imported to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<string> ListProvidersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<string>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListProviders");
                scope.Start();
                try
                {
                    var response = await RestClient.ListProvidersAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<string>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListProviders");
                scope.Start();
                try
                {
                    var response = await RestClient.ListProvidersNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all update providers that have been imported to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<string> ListProviders(CancellationToken cancellationToken = default)
        {
            Page<string> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListProviders");
                scope.Start();
                try
                {
                    var response = RestClient.ListProviders(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<string> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListProviders");
                scope.Start();
                try
                {
                    var response = RestClient.ListProvidersNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all update names that match the specified provider. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/> is null. </exception>
        public virtual AsyncPageable<string> ListNamesAsync(string provider, CancellationToken cancellationToken = default)
        {
            if (provider == null)
            {
                throw new ArgumentNullException(nameof(provider));
            }

            async Task<Page<string>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListNames");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNamesAsync(provider, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<string>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListNames");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNamesNextPageAsync(nextLink, provider, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all update names that match the specified provider. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/> is null. </exception>
        public virtual Pageable<string> ListNames(string provider, CancellationToken cancellationToken = default)
        {
            if (provider == null)
            {
                throw new ArgumentNullException(nameof(provider));
            }

            Page<string> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListNames");
                scope.Start();
                try
                {
                    var response = RestClient.ListNames(provider, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<string> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListNames");
                scope.Start();
                try
                {
                    var response = RestClient.ListNamesNextPage(nextLink, provider, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all update versions that match the specified provider and name. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="filter"> Filter updates by its properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/> or <paramref name="name"/> is null. </exception>
        public virtual AsyncPageable<string> ListVersionsAsync(string provider, string name, string filter = null, CancellationToken cancellationToken = default)
        {
            if (provider == null)
            {
                throw new ArgumentNullException(nameof(provider));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            async Task<Page<string>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListVersions");
                scope.Start();
                try
                {
                    var response = await RestClient.ListVersionsAsync(provider, name, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<string>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListVersions");
                scope.Start();
                try
                {
                    var response = await RestClient.ListVersionsNextPageAsync(nextLink, provider, name, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all update versions that match the specified provider and name. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="filter"> Filter updates by its properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/> or <paramref name="name"/> is null. </exception>
        public virtual Pageable<string> ListVersions(string provider, string name, string filter = null, CancellationToken cancellationToken = default)
        {
            if (provider == null)
            {
                throw new ArgumentNullException(nameof(provider));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            Page<string> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListVersions");
                scope.Start();
                try
                {
                    var response = RestClient.ListVersions(provider, name, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<string> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListVersions");
                scope.Start();
                try
                {
                    var response = RestClient.ListVersionsNextPage(nextLink, provider, name, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all update file identifiers for the specified version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/> or <paramref name="version"/> is null. </exception>
        public virtual AsyncPageable<string> ListFilesAsync(string provider, string name, string version, CancellationToken cancellationToken = default)
        {
            if (provider == null)
            {
                throw new ArgumentNullException(nameof(provider));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            async Task<Page<string>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListFiles");
                scope.Start();
                try
                {
                    var response = await RestClient.ListFilesAsync(provider, name, version, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<string>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListFiles");
                scope.Start();
                try
                {
                    var response = await RestClient.ListFilesNextPageAsync(nextLink, provider, name, version, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all update file identifiers for the specified version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/> or <paramref name="version"/> is null. </exception>
        public virtual Pageable<string> ListFiles(string provider, string name, string version, CancellationToken cancellationToken = default)
        {
            if (provider == null)
            {
                throw new ArgumentNullException(nameof(provider));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            Page<string> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListFiles");
                scope.Start();
                try
                {
                    var response = RestClient.ListFiles(provider, name, version, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<string> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListFiles");
                scope.Start();
                try
                {
                    var response = RestClient.ListFilesNextPage(nextLink, provider, name, version, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete operations are not returned by this API version. </summary>
        /// <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: &quot;status eq &apos;NotStarted&apos; or status eq &apos;Running&apos;&quot;. </param>
        /// <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<UpdateOperation> ListOperationsAsync(string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<UpdateOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOperationsAsync(filter, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<UpdateOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOperationsNextPageAsync(nextLink, filter, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete operations are not returned by this API version. </summary>
        /// <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: &quot;status eq &apos;NotStarted&apos; or status eq &apos;Running&apos;&quot;. </param>
        /// <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<UpdateOperation> ListOperations(string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            Page<UpdateOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListOperations");
                scope.Start();
                try
                {
                    var response = RestClient.ListOperations(filter, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<UpdateOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.ListOperations");
                scope.Start();
                try
                {
                    var response = RestClient.ListOperationsNextPage(nextLink, filter, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Import new update version. </summary>
        /// <param name="action"> Import update action. </param>
        /// <param name="updateToImport"> The update to be imported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateToImport"/> is null. </exception>
        public virtual async Task<DeviceUpdateImportUpdateOperation> StartImportUpdateAsync(ImportAction action, IEnumerable<ImportUpdateInputItem> updateToImport, CancellationToken cancellationToken = default)
        {
            if (updateToImport == null)
            {
                throw new ArgumentNullException(nameof(updateToImport));
            }

            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.StartImportUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ImportUpdateAsync(action, updateToImport, cancellationToken).ConfigureAwait(false);
                return new DeviceUpdateImportUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateImportUpdateRequest(action, updateToImport).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import new update version. </summary>
        /// <param name="action"> Import update action. </param>
        /// <param name="updateToImport"> The update to be imported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateToImport"/> is null. </exception>
        public virtual DeviceUpdateImportUpdateOperation StartImportUpdate(ImportAction action, IEnumerable<ImportUpdateInputItem> updateToImport, CancellationToken cancellationToken = default)
        {
            if (updateToImport == null)
            {
                throw new ArgumentNullException(nameof(updateToImport));
            }

            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.StartImportUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ImportUpdate(action, updateToImport, cancellationToken);
                return new DeviceUpdateImportUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateImportUpdateRequest(action, updateToImport).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a specific update version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/> or <paramref name="version"/> is null. </exception>
        public virtual async Task<DeviceUpdateDeleteUpdateOperation> StartDeleteUpdateAsync(string provider, string name, string version, CancellationToken cancellationToken = default)
        {
            if (provider == null)
            {
                throw new ArgumentNullException(nameof(provider));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.StartDeleteUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteUpdateAsync(provider, name, version, cancellationToken).ConfigureAwait(false);
                return new DeviceUpdateDeleteUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteUpdateRequest(provider, name, version).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a specific update version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/> or <paramref name="version"/> is null. </exception>
        public virtual DeviceUpdateDeleteUpdateOperation StartDeleteUpdate(string provider, string name, string version, CancellationToken cancellationToken = default)
        {
            if (provider == null)
            {
                throw new ArgumentNullException(nameof(provider));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var scope = _clientDiagnostics.CreateScope("DeviceUpdateClient.StartDeleteUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteUpdate(provider, name, version, cancellationToken);
                return new DeviceUpdateDeleteUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteUpdateRequest(provider, name, version).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
