// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.IoT.DeviceUpdate.Models;

namespace Azure.IoT.DeviceUpdate
{
    /// <summary> The DeviceManagement service client. </summary>
    public partial class DeviceManagementClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DeviceManagementRestClient RestClient { get; }

        /// <summary> Initializes a new instance of DeviceManagementClient for mocking. </summary>
        protected DeviceManagementClient()
        {
        }

        /// <summary> Initializes a new instance of DeviceManagementClient. </summary>
        /// <param name="endpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public DeviceManagementClient(string endpoint, string instanceId, TokenCredential credential, DeviceUpdateClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException(nameof(instanceId));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new DeviceUpdateClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://api.adu.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new DeviceManagementRestClient(_clientDiagnostics, _pipeline, endpoint, instanceId, options.Version);
        }

        /// <summary> Initializes a new instance of DeviceManagementClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="endpoint"/>, <paramref name="instanceId"/> or <paramref name="apiVersion"/> is null. </exception>
        internal DeviceManagementClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint, string instanceId, string apiVersion = "2021-06-01-preview")
        {
            RestClient = new DeviceManagementRestClient(clientDiagnostics, pipeline, endpoint, instanceId, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the properties of a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeviceClass>> GetDeviceClassAsync(string deviceClassId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceClass");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceClassAsync(deviceClassId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeviceClass> GetDeviceClass(string deviceClassId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceClass");
            scope.Start();
            try
            {
                return RestClient.GetDeviceClass(deviceClassId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IoT Hub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Device>> GetDeviceAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDevice");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceAsync(deviceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IoT Hub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Device> GetDevice(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDevice");
            scope.Start();
            try
            {
                return RestClient.GetDevice(deviceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device module properties and latest deployment status for a device module connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IoT Hub. </param>
        /// <param name="moduleId"> Device module identifier in Azure IoT Hub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Device>> GetDeviceModuleAsync(string deviceId, string moduleId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceModule");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceModuleAsync(deviceId, moduleId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device module properties and latest deployment status for a device module connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IoT Hub. </param>
        /// <param name="moduleId"> Device module identifier in Azure IoT Hub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Device> GetDeviceModule(string deviceId, string moduleId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceModule");
            scope.Start();
            try
            {
                return RestClient.GetDeviceModule(deviceId, moduleId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress receiving new updates. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UpdateCompliance>> GetUpdateComplianceAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetUpdateCompliance");
            scope.Start();
            try
            {
                return await RestClient.GetUpdateComplianceAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress receiving new updates. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UpdateCompliance> GetUpdateCompliance(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetUpdateCompliance");
            scope.Start();
            try
            {
                return RestClient.GetUpdateCompliance(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a count of how many devices have a device tag. </summary>
        /// <param name="tagName"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeviceTag>> GetDeviceTagAsync(string tagName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceTag");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceTagAsync(tagName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a count of how many devices have a device tag. </summary>
        /// <param name="tagName"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeviceTag> GetDeviceTag(string tagName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceTag");
            scope.Start();
            try
            {
                return RestClient.GetDeviceTag(tagName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Group>> GetGroupAsync(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetGroup");
            scope.Start();
            try
            {
                return await RestClient.GetGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Group> GetGroup(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetGroup");
            scope.Start();
            try
            {
                return RestClient.GetGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a device group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="group"> The group properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Group>> CreateOrUpdateGroupAsync(string groupId, Group group, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.CreateOrUpdateGroup");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateGroupAsync(groupId, group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a device group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="group"> The group properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Group> CreateOrUpdateGroup(string groupId, Group group, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.CreateOrUpdateGroup");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateGroup(groupId, group, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a device group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteGroupAsync(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.DeleteGroup");
            scope.Start();
            try
            {
                return await RestClient.DeleteGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a device group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteGroup(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.DeleteGroup");
            scope.Start();
            try
            {
                return RestClient.DeleteGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get group update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UpdateCompliance>> GetGroupUpdateComplianceAsync(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetGroupUpdateCompliance");
            scope.Start();
            try
            {
                return await RestClient.GetGroupUpdateComplianceAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get group update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UpdateCompliance> GetGroupUpdateCompliance(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetGroupUpdateCompliance");
            scope.Start();
            try
            {
                return RestClient.GetGroupUpdateCompliance(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Deployment>> GetDeploymentAsync(string groupId, string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeployment");
            scope.Start();
            try
            {
                return await RestClient.GetDeploymentAsync(groupId, deploymentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Deployment> GetDeployment(string groupId, string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeployment");
            scope.Start();
            try
            {
                return RestClient.GetDeployment(groupId, deploymentId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deployment"> The deployment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Deployment>> CreateOrUpdateDeploymentAsync(string deploymentId, string groupId, Deployment deployment, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.CreateOrUpdateDeployment");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateDeploymentAsync(deploymentId, groupId, deployment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deployment"> The deployment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Deployment> CreateOrUpdateDeployment(string deploymentId, string groupId, Deployment deployment, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.CreateOrUpdateDeployment");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateDeployment(deploymentId, groupId, deployment, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteDeploymentAsync(string groupId, string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.DeleteDeployment");
            scope.Start();
            try
            {
                return await RestClient.DeleteDeploymentAsync(groupId, deploymentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteDeployment(string groupId, string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.DeleteDeployment");
            scope.Start();
            try
            {
                return RestClient.DeleteDeployment(groupId, deploymentId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeploymentStatus>> GetDeploymentStatusAsync(string groupId, string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                return await RestClient.GetDeploymentStatusAsync(groupId, deploymentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeploymentStatus> GetDeploymentStatus(string groupId, string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                return RestClient.GetDeploymentStatus(groupId, deploymentId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve operation status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="accessCondition"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeviceOperation>> GetOperationAsync(string operationId, AccessCondition accessCondition = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetOperation");
            scope.Start();
            try
            {
                return await RestClient.GetOperationAsync(operationId, accessCondition, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve operation status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="accessCondition"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeviceOperation> GetOperation(string operationId, AccessCondition accessCondition = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetOperation");
            scope.Start();
            try
            {
                return RestClient.GetOperation(operationId, accessCondition, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the device diagnostics log collection operation on specified devices. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="logCollectionRequest"> The deployment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LogCollectionOperation>> CollectLogsAsync(string operationId, LogCollectionOperation logCollectionRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.CollectLogs");
            scope.Start();
            try
            {
                return await RestClient.CollectLogsAsync(operationId, logCollectionRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the device diagnostics log collection operation on specified devices. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="logCollectionRequest"> The deployment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LogCollectionOperation> CollectLogs(string operationId, LogCollectionOperation logCollectionRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.CollectLogs");
            scope.Start();
            try
            {
                return RestClient.CollectLogs(operationId, logCollectionRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the device diagnostics log collection operation. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LogCollectionOperation>> GetLogCollectionOperationAsync(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetLogCollectionOperation");
            scope.Start();
            try
            {
                return await RestClient.GetLogCollectionOperationAsync(operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the device diagnostics log collection operation. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LogCollectionOperation> GetLogCollectionOperation(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetLogCollectionOperation");
            scope.Start();
            try
            {
                return RestClient.GetLogCollectionOperation(operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device diagnostics log collection operation with detailed status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LogCollectionOperationDetailedStatus>> GetLogCollectionOperationDetailedStatusAsync(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetLogCollectionOperationDetailedStatus");
            scope.Start();
            try
            {
                return await RestClient.GetLogCollectionOperationDetailedStatusAsync(operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device diagnostics log collection operation with detailed status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LogCollectionOperationDetailedStatus> GetLogCollectionOperationDetailedStatus(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.GetLogCollectionOperationDetailedStatus");
            scope.Start();
            try
            {
                return RestClient.GetLogCollectionOperationDetailedStatus(operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="action"> Cancel deployment action. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Deployment>> StopDeploymentAsync(string groupId, string deploymentId, DeploymentCancelAction action, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.StopDeployment");
            scope.Start();
            try
            {
                return await RestClient.StopDeploymentAsync(groupId, deploymentId, action, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="action"> Cancel deployment action. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Deployment> StopDeployment(string groupId, string deploymentId, DeploymentCancelAction action, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.StopDeployment");
            scope.Start();
            try
            {
                return RestClient.StopDeployment(groupId, deploymentId, action, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retries a deployment with failed devices. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="action"> Retry deployment action. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Deployment>> RetryDeploymentAsync(string groupId, string deploymentId, DeploymentRetryAction action, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.RetryDeployment");
            scope.Start();
            try
            {
                return await RestClient.RetryDeploymentAsync(groupId, deploymentId, action, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retries a deployment with failed devices. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="action"> Retry deployment action. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Deployment> RetryDeployment(string groupId, string deploymentId, DeploymentRetryAction action, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.RetryDeployment");
            scope.Start();
            try
            {
                return RestClient.RetryDeployment(groupId, deploymentId, action, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<DeviceClass> ListDeviceClassesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DeviceClass>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeviceClasses");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDeviceClassesAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceClass>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeviceClasses");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDeviceClassesNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<DeviceClass> ListDeviceClasses(CancellationToken cancellationToken = default)
        {
            Page<DeviceClass> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeviceClasses");
                scope.Start();
                try
                {
                    var response = RestClient.ListDeviceClasses(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceClass> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeviceClasses");
                scope.Start();
                try
                {
                    var response = RestClient.ListDeviceClassesNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of installable updates for a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        public virtual AsyncPageable<UpdateId> ListInstallableUpdatesForDeviceClassAsync(string deviceClassId, CancellationToken cancellationToken = default)
        {
            if (deviceClassId == null)
            {
                throw new ArgumentNullException(nameof(deviceClassId));
            }

            async Task<Page<UpdateId>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListInstallableUpdatesForDeviceClass");
                scope.Start();
                try
                {
                    var response = await RestClient.ListInstallableUpdatesForDeviceClassAsync(deviceClassId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<UpdateId>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListInstallableUpdatesForDeviceClass");
                scope.Start();
                try
                {
                    var response = await RestClient.ListInstallableUpdatesForDeviceClassNextPageAsync(nextLink, deviceClassId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of installable updates for a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        public virtual Pageable<UpdateId> ListInstallableUpdatesForDeviceClass(string deviceClassId, CancellationToken cancellationToken = default)
        {
            if (deviceClassId == null)
            {
                throw new ArgumentNullException(nameof(deviceClassId));
            }

            Page<UpdateId> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListInstallableUpdatesForDeviceClass");
                scope.Start();
                try
                {
                    var response = RestClient.ListInstallableUpdatesForDeviceClass(deviceClassId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<UpdateId> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListInstallableUpdatesForDeviceClass");
                scope.Start();
                try
                {
                    var response = RestClient.ListInstallableUpdatesForDeviceClassNextPage(nextLink, deviceClassId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of devices connected to Device Update for IoT Hub. </summary>
        /// <param name="filter"> Restricts the set of devices returned. You can filter on device GroupId or DeviceClassId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Device> ListDevicesAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Device>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDevicesAsync(filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Device>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDevicesNextPageAsync(nextLink, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of devices connected to Device Update for IoT Hub. </summary>
        /// <param name="filter"> Restricts the set of devices returned. You can filter on device GroupId or DeviceClassId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Device> ListDevices(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<Device> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDevices");
                scope.Start();
                try
                {
                    var response = RestClient.ListDevices(filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Device> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDevices");
                scope.Start();
                try
                {
                    var response = RestClient.ListDevicesNextPage(nextLink, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of available group device tags for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<DeviceTag> ListDeviceTagsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DeviceTag>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeviceTags");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDeviceTagsAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceTag>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeviceTags");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDeviceTagsNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of available group device tags for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<DeviceTag> ListDeviceTags(CancellationToken cancellationToken = default)
        {
            Page<DeviceTag> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeviceTags");
                scope.Start();
                try
                {
                    var response = RestClient.ListDeviceTags(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceTag> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeviceTags");
                scope.Start();
                try
                {
                    var response = RestClient.ListDeviceTagsNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all device groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Group> ListGroupsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Group>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListGroups");
                scope.Start();
                try
                {
                    var response = await RestClient.ListGroupsAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Group>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListGroups");
                scope.Start();
                try
                {
                    var response = await RestClient.ListGroupsNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all device groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Group> ListGroups(CancellationToken cancellationToken = default)
        {
            Page<Group> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListGroups");
                scope.Start();
                try
                {
                    var response = RestClient.ListGroups(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Group> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListGroups");
                scope.Start();
                try
                {
                    var response = RestClient.ListGroupsNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the best available updates for a group and a count of how many devices need each update. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="filter"> Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        public virtual AsyncPageable<UpdatableDevices> ListBestUpdatesForGroupAsync(string groupId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }

            async Task<Page<UpdatableDevices>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListBestUpdatesForGroup");
                scope.Start();
                try
                {
                    var response = await RestClient.ListBestUpdatesForGroupAsync(groupId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<UpdatableDevices>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListBestUpdatesForGroup");
                scope.Start();
                try
                {
                    var response = await RestClient.ListBestUpdatesForGroupNextPageAsync(nextLink, groupId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the best available updates for a group and a count of how many devices need each update. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="filter"> Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        public virtual Pageable<UpdatableDevices> ListBestUpdatesForGroup(string groupId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }

            Page<UpdatableDevices> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListBestUpdatesForGroup");
                scope.Start();
                try
                {
                    var response = RestClient.ListBestUpdatesForGroup(groupId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<UpdatableDevices> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListBestUpdatesForGroup");
                scope.Start();
                try
                {
                    var response = RestClient.ListBestUpdatesForGroupNextPage(nextLink, groupId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of deployments for a group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        public virtual AsyncPageable<Deployment> ListDeploymentsForGroupAsync(string groupId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }

            async Task<Page<Deployment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeploymentsForGroup");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDeploymentsForGroupAsync(groupId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Deployment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeploymentsForGroup");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDeploymentsForGroupNextPageAsync(nextLink, groupId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of deployments for a group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        public virtual Pageable<Deployment> ListDeploymentsForGroup(string groupId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }

            Page<Deployment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeploymentsForGroup");
                scope.Start();
                try
                {
                    var response = RestClient.ListDeploymentsForGroup(groupId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Deployment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeploymentsForGroup");
                scope.Start();
                try
                {
                    var response = RestClient.ListDeploymentsForGroupNextPage(nextLink, groupId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        public virtual AsyncPageable<DeploymentDeviceState> ListDeploymentDevicesAsync(string groupId, string deploymentId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            async Task<Page<DeploymentDeviceState>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeploymentDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDeploymentDevicesAsync(groupId, deploymentId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeploymentDeviceState>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeploymentDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.ListDeploymentDevicesNextPageAsync(nextLink, groupId, deploymentId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        public virtual Pageable<DeploymentDeviceState> ListDeploymentDevices(string groupId, string deploymentId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            Page<DeploymentDeviceState> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeploymentDevices");
                scope.Start();
                try
                {
                    var response = RestClient.ListDeploymentDevices(groupId, deploymentId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeploymentDeviceState> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListDeploymentDevices");
                scope.Start();
                try
                {
                    var response = RestClient.ListDeploymentDevicesNextPage(nextLink, groupId, deploymentId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted. </summary>
        /// <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: &quot;status eq &apos;NotStarted&apos; or status eq &apos;Running&apos;&quot;. </param>
        /// <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<DeviceOperation> ListOperationsAsync(string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<DeviceOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOperationsAsync(filter, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListOperationsNextPageAsync(nextLink, filter, top, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted. </summary>
        /// <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: &quot;status eq &apos;NotStarted&apos; or status eq &apos;Running&apos;&quot;. </param>
        /// <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<DeviceOperation> ListOperations(string filter = null, int? top = null, CancellationToken cancellationToken = default)
        {
            Page<DeviceOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListOperations");
                scope.Start();
                try
                {
                    var response = RestClient.ListOperations(filter, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListOperations");
                scope.Start();
                try
                {
                    var response = RestClient.ListOperationsNextPage(nextLink, filter, top, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get all device diagnostics log collection operations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<LogCollectionOperation> ListLogCollectionOperationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<LogCollectionOperation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListLogCollectionOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListLogCollectionOperationsAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<LogCollectionOperation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListLogCollectionOperations");
                scope.Start();
                try
                {
                    var response = await RestClient.ListLogCollectionOperationsNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get all device diagnostics log collection operations. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<LogCollectionOperation> ListLogCollectionOperations(CancellationToken cancellationToken = default)
        {
            Page<LogCollectionOperation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListLogCollectionOperations");
                scope.Start();
                try
                {
                    var response = RestClient.ListLogCollectionOperations(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<LogCollectionOperation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.ListLogCollectionOperations");
                scope.Start();
                try
                {
                    var response = RestClient.ListLogCollectionOperationsNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Import existing devices from IoT Hub. </summary>
        /// <param name="action"> Devices action. </param>
        /// <param name="importType"> The types of devices to import. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<DeviceManagementImportDevicesOperation> StartImportDevicesAsync(ImportAction action, ImportType importType, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.StartImportDevices");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ImportDevicesAsync(action, importType, cancellationToken).ConfigureAwait(false);
                return new DeviceManagementImportDevicesOperation(_clientDiagnostics, _pipeline, RestClient.CreateImportDevicesRequest(action, importType).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import existing devices from IoT Hub. </summary>
        /// <param name="action"> Devices action. </param>
        /// <param name="importType"> The types of devices to import. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual DeviceManagementImportDevicesOperation StartImportDevices(ImportAction action, ImportType importType, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeviceManagementClient.StartImportDevices");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ImportDevices(action, importType, cancellationToken);
                return new DeviceManagementImportDevicesOperation(_clientDiagnostics, _pipeline, RestClient.CreateImportDevicesRequest(action, importType).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
