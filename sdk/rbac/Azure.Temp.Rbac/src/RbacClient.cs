// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Temp.Rbac.Models;

namespace Azure.Temp.Rbac
{
    /// <summary> The Rbac service client. </summary>
    public partial class RbacClient
    {

        private readonly Uri _endpoint;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        private readonly string _defaultScope = string.Empty; // TODO: fill in scope

        internal RbacRestClient RestClient { get; }

        /// <summary>
        /// </summary>
        /// <param name="endpoint">The <see cref="Uri"/> referencing the app configuration storage.</param>
        /// <param name="credential">The token credential used to sign requests.</param>
        public RbacClient(Uri endpoint, TokenCredential credential)
            : this(endpoint, credential, new RbacClientOptions())
        {
        }

        /// <summary>
        /// </summary>
        /// <param name="endpoint">The <see cref="Uri"/> referencing the app configuration storage.</param>
        /// <param name="credential">The token credential used to sign requests.</param>
        /// <param name="options">Options that allow configuration of requests sent to the configuration store.</param>
        public RbacClient(Uri endpoint, TokenCredential credential, RbacClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            _endpoint = endpoint;
            _pipeline = CreatePipeline(options, new BearerTokenAuthenticationPolicy(credential, _defaultScope));

            _clientDiagnostics = new ClientDiagnostics(options);
        }

        private static HttpPipeline CreatePipeline(RbacClientOptions options, HttpPipelinePolicy authenticationPolicy)
        {
            return HttpPipelineBuilder.Build(options, authenticationPolicy);
        }

        /// <summary> Initializes a new instance of RbacClient for mocking. </summary>
        protected RbacClient()
        {
        }

        /// <summary> Initializes a new instance of RbacClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="resourceGroupName"> The name of the target resource group. </param>
        /// <param name="registryName"> The name of the registry. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal RbacClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, string resourceGroupName, string registryName, Uri endpoint = null, string apiVersion = "2018-09-01-preview")
        {
            RestClient = new RbacRestClient(clientDiagnostics, pipeline, subscriptionId, resourceGroupName, registryName, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Evalute CheckAccess request. </summary>
        /// <param name="body"> The AuthorizationRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AuthorizationDecision>>> CheckAccessAsync(AuthorizationRequest body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RbacClient.CheckAccess");
            scope.Start();
            try
            {
                return await RestClient.CheckAccessAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Evalute CheckAccess request. </summary>
        /// <param name="body"> The AuthorizationRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AuthorizationDecision>> CheckAccess(AuthorizationRequest body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("RbacClient.CheckAccess");
            scope.Start();
            try
            {
                return RestClient.CheckAccess(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
